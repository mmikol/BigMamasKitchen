BigMamasKitchen {
  Program         =  Stmt*
  Stmt            =  SimpleStmt terminate                             -- simple
                  |  Dec                                                             
                  |  Loop
                  |  IfStmt
  SimpleStmt      =  Assignment                                       
                  |  Call                                             
                  |  stop                                             -- break
                  |  serve Exp?                                       -- return
                  |  mamaSays Exp                                     -- print
                  |  Exp                                              
  IfStmt          =  addAPinchOf Exp Block (ElseStmt | ElseIfStmt)    -- long
                  |  addAPinchOf Exp Block                            -- short
  ElseIfStmt      =  orSubstitute Exp Block (ElseStmt | ElseIfStmt)   -- long
                  |  orSubstitute Exp Block                           -- short         
  ElseStmt        =  dumpLeftovers Block
  Loop            =  stir until Exp Block                             -- while
                  |  bake (VarDec | id) until Exp (Increment)? Block  -- for
  Assignment      =  Increment                                        
                  |  Var "=" Exp                                      -- assign
  Increment       =  Var incop  
  Dec             =  FuncDec 
                  |  VarDec terminate                                 -- variable
  FuncDec         =  recipe (Type) id Params Block 
  VarDec          =  ingredient Type id "=" Exp
  Type            =  Type "(@)"	                                      -- array
                  |  Type "[#]"                                       -- dict 
                  |  spicy 
                  |  bitter
                  |  salty
                  |  bland
                  |  empty
  Array           =  "(@" Type "@)"                                   -- emptyarray
                  |  "(@)" NonemptyListOf<Exp, ","> "(@)"             -- array
  Dict            =  "[#" Type "#]"                                   -- emptydict
                  |  "[#]" ListOf< DictEl, ","> "[#]"                    -- dict           
  DictEl          =  Exp ":" Exp
  Params          =  "(" ListOf<Parameter, ","> ")"
  Parameter       =  Type id
  Block           =  "(^-^)~" Stmt* "~(^-^)"
  Exp             =  Exp1 ("||" Exp1)+                                -- or
                  |  Exp1 ("&&" Exp1)+                                -- and
                  |  Exp1
  Exp1            =  Exp2 relop Exp2                                  -- binary
                  |  Exp2
  Exp2            =  Exp2 addop Exp3                                  -- binary
                  |  Exp3
  Exp3            =  Exp3 mulop Exp4                                  -- binary
                  |  Exp4
  Exp4            =  prefixop Exp5                                    -- unary
                  |  Exp5
  Exp5            =  Exp6 "^" Exp5                                    -- exponential
                  |  Exp6
  Exp6            =  Literal
                  |  Increment
                  |  Var
                  |  "(" Exp ")"                                      -- parens
  Literal         =  nothing
                  |  boollit
                  |  numlit
                  |  stringlit
                  |  Array
                  |  Dict
  Var             =  Var "(@)"Exp"(@)"                                -- subscript
                  |  Var "[#]"Exp"[#]"                                -- dictionary 
                  |  Call
                  |  id
  Call            =  id "(" ListOf<Exp, ","> ")"
  
  spicy           = "spicy" ~idrest
  nothing         = "nothing" ~idrest
  bitter          = "bitter" ~idrest
  salty           = "salty" ~idrest
  stop            = "stop" ~idrest
  addAPinchOf     = "addAPinchOf" ~idrest
  orSubstitute    = "orSubstitute" ~idrest
  dumpLeftovers   = "dumpLeftovers" ~idrest
  raw             = "raw" ~idrest
  cooked          = "cooked" ~idrest
  bake            = "bake" ~idrest
  empty           = "empty" ~idrest
  mamaSays        = "mamaSays" ~idrest
  serve           = "serve" ~idrest
  bland           = "bland" ~idrest
  stir            = "stir" ~idrest
  ingredient      = "ingredient" ~idrest
  recipe          = "recipe" ~idrest
  until           = "until" ~idrest
  terminate       =  ";)" ~idrest
  keyword         =  spicy | addAPinchOf | stop | dumpLeftovers 
                  | bitter | bake | serve | empty | nothing | stir | cooked
                  | salty | bland | raw | mamaSays | until | orSubstitute 
                  | ingredient | terminate | recipe
  id              =  ~keyword letter idrest*
  idrest          =  "_" | alnum
  numlit          =  digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  boollit         =  raw | cooked
  h               =  hexDigit
  escape          =  "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t" | hexseq
  hexseq          =  "\\" h h? h? h? h? h? h? h? ";"
  stringlit       =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  addop           =  "+" | "-"
  relop           =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop           =  "*" | "/" | "%"
  prefixop        =  ~"--" "-" | "!"
  incop           =  "++" | "--"
  space           :=  "\x20" | "\x09" | "\x0A" | "\x0D" | comment
  comment         =  "--[=]" (~"[=]--" any)* "[=]--"                  -- multiLine
                  | "~(=^..^)" (~"\n" any)*                           -- singleLine
}